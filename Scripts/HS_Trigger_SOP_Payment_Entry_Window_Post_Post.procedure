Procedure	"HS_Trigger_SOP_Payment_Entry_Window_Post_Post"
{
	Core	"System"
	Documentation	""
	Script	"local		string			sInvoiceNo;
local 		currency		cPaymentAmount;
local 		currency		cCOD_Amount;
local 		currency		cPaymentDistributed;
local		text			tCode;
local		string			sCompileMessage;
local		integer			nErrorCount;
local		string			sAgreementNo;
local		date			dDocumentDate;
local		boolean			bSaved;


pragma (disable warning LiteralStringUsed);


default form to SOP_Payment_Entry;
default window to SOP_Payment_Entry;


if ('(L) Close Flag' = SOP_DELETE_CLOSE) then
	abort script;
end if;


if not changed(form SOP_Payment_Entry) and ('(L) Invisible Changes' <> 1) then
	abort script;
end if;


if integer(itemdata('SOP Type', 'SOP Type')) <> SOP_TYPE_RENTAL_INVOICE and integer(itemdata('SOP Type', 'SOP Type')) <> SOP_TYPE_RENTAL_CREDIT then
	abort script;
end if;

call Misc_Get_Window_Value, PRODID_EQUIPMENT_MANAGEMENT, \"EQS_Rental_Invoice_Entry\", \"Entry\", \"EQS Rental Invoice Number\", sInvoiceNo;
if 'SOP Number' <> sInvoiceNo then
	abort script;
end if;


{ Get payments fields for comparing to new ones }
call EQS_Rental_Invoice_Entry_Get_Window_Fields,
 cPaymentAmount,
 cCOD_Amount,
 cPaymentDistributed;


{ Payments window is saved and needs to return values to Rental Invoice window }
call EQS_Rental_Invoice_Entry_Set_Window_Fields,
 'Amount Received',
 'COD Amount',
 'Amount Received';


{ Check anything changed and if so set changed flag on Rental window }
if 'Amount Received' <> cPaymentAmount or 'COD Amount' <> cCOD_Amount or 'Amount Received' <> cPaymentDistributed then
	tCode = \"force changes window Entry of form EQS_Rental_Invoice_Entry;\";
	nErrorCount = execute(PRODID_EQUIPMENT_MANAGEMENT, tCode, sCompileMessage);
	call OPEN_CODE_VIEWER of form HS_Misc_Code_Viewer, tCode, sCompileMessage;
end if;


{ If Amount Received is set to zero, delete all paymet records - just in case }
if 'Amount Received' = 0 then
	call Rental_Delete_Payments,
	 SOP_TYPE_RENTAL_INVOICE,
	 sInvoiceNo,
	 true;

	call Rental_Delete_Payments,
	 SOP_TYPE_RENTAL_CREDIT,
	 sInvoiceNo,
	 true;
end if;


{ Recalculate Invoice Distributions  }
call Misc_Get_Window_Value, PRODID_EQUIPMENT_MANAGEMENT, \"EQS_Rental_Invoice_Entry\", \"Entry\", \"EQS Rental Agreement Number\", sAgreementNo;
call Misc_Get_Window_Value, PRODID_EQUIPMENT_MANAGEMENT, \"EQS_Rental_Invoice_Entry\", \"Entry\", \"Document Date\", dDocumentDate;

call with name \"Rental_Invoice_Update_Agree_Invoice_Header_Distributions_Totals\" in dictionary PRODID_EQUIPMENT_MANAGEMENT,
 sInvoiceNo,
 sAgreementNo,
 false,	{delete only}
 dDocumentDate,
 bSaved;


pragma (enable warning LiteralStringUsed);
"
	ServiceAction	""
	ServiceCustomAciton	""
	ServiceEnabled	"FALSE"
	ServiceRawRequest	"FALSE"
	ServiceUriTemplate	""
	UserProperties	""
}
